// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       Int    @id @default(autoincrement())
//   email    String @unique
//   password String @db.VarChar(512)
// }

model Product {
  id           Int            @id @default(autoincrement())
  title        String
  image        String?
  slug         String?        @unique
  price        Float
  quantity     Int
  description  String?
  category     Category       @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  categoryID   Int
  ShoppingCart ShoppingCart[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Chef {
  id          Int     @id @default(autoincrement())
  image       String?
  name        String
  description String
}

model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  username      String?
  gh_username   String?
  password      String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  ShoppingCart  ShoppingCart[]
  role          String         @default("USER")

  @@map("users")
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  validUntil DateTime
}
